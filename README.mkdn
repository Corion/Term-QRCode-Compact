
[![Windows](https://github.com/Corion/Term-QRCode-Compact/workflows/windows/badge.svg)](https://github.com/Corion/Term-QRCode-Compact/actions?query=workflow%3Awindows)
[![MacOS](https://github.com/Corion/Term-QRCode-Compact/workflows/macos/badge.svg)](https://github.com/Corion/Term-QRCode-Compact/actions?query=workflow%3Amacos)
[![Linux](https://github.com/Corion/Term-QRCode-Compact/workflows/linux/badge.svg)](https://github.com/Corion/Term-QRCode-Compact/actions?query=workflow%3Alinux)

# NAME

Term::QRCode::Compact - create QR codes for display in the terminal

# SYNOPSIS

    use Term::QRCode::Compact 'qr_code_as_text';
    say qr_code_as_text(text => 'https://metacpan.org/module/Term::QRCode::Compact');

      ██████████████  ████    ██████████  ██    ██████    ██████████████
      ██          ██    ██      ████      ████    ██      ██          ██
      ██  ██████  ██    ████████  ████  ██████████        ██  ██████  ██
      ██  ██████  ██  ██████        ██████  ██      ██    ██  ██████  ██
      ██  ██████  ██  ████      ██    ████  ██    ████    ██  ██████  ██
      ██          ██  ██  ██    ██  ██        ██          ██          ██
      ██████████████  ██  ██  ██  ██  ██  ██  ██  ██  ██  ██████████████
                      ██      ██  ██    ████████████  ██
      ██      ██  ██████    ██      ██████    ████████████████████    ██
      ██████          ██  ██          ██████  ██    ██  ██      ████
      ██          ████    ██  ████████    ██  ████████████      ██
              ████    ████    ████          ██████████                ██
          ██████████  ██    ██  ██  ████    ██  ████  ██  ██  ████  ██
      ██  ████  ██          ████  ██    ████████    ██  ██  ██
              ██  ██  ████  ██      ██    ██  ██████████████    ██████
      ██    ██  ██      ██  ██████  ████████    ██      ████
        ██  ████  ██  ██████████        ██  ████████  ██  ██  ████████
              ██    ██████  ██    ████    ██        ██  ██      ████
      ████  ████████  ████    ████████  ██      ██████  ██  ██  ██
          ██        ██  ██        ████  ██████  ██  ██████  ██      ██
        ████████████████  ██    ██        ██████████  ██████  ████
      ████  ██  ██      ██  ██████    ██    ██  ██          ██    ████
          ██████  ████████████  ████  ████████      ██  ████        ██
                    ████  ████  ██      ██  ████████    ██  ████    ██
      ████  ██    ██  ████  ██  ██████  ██      ██  ████████████████████
                      ██  ██    ██  ██████          ████      ██  ████
      ██████████████  ██████  ████  ████  ██  ██  ██  ██  ██  ████  ██
      ██          ██    ██████  ██████      ██████    ██      ██      ██
      ██  ██████  ██  ████    ██████████      ██████  ████████████  ████
      ██  ██████  ██    ████    ██        ██████████████  ██████  ██
      ██  ██████  ██    ████  ██    ██  ████              ██████████
      ██          ██    ██      ██  ████████  ██████  ██  ██
      ██████████████  ██  ██████        ██  ████████  ████        ██  ██


    say qr_code_as_text(
        charset => 'ascii_1x1',
        text => 'Hello'
    );

    ############################        ################    ############################
    ############################        ################    ############################
    ####                    ####                    ####    ####                    ####
    ####                    ####                    ####    ####                    ####
    ####    ############    ####    ####    ####    ####    ####    ############    ####
    ####    ############    ####    ####    ####    ####    ####    ############    ####
    ####    ############    ####    ####    ####            ####    ############    ####
    ####    ############    ####    ####    ####            ####    ############    ####
    ####    ############    ####    ########        ####    ####    ############    ####
    ####    ############    ####    ########        ####    ####    ############    ####
    ####                    ####    ########    ####        ####                    ####
    ####                    ####    ########    ####        ####                    ####
    ############################    ####    ####    ####    ############################
    ############################    ####    ####    ####    ############################
                                    ####    ####
                                    ####    ####
    ####    ####################        ####    ####        ####################
    ####    ####################        ####    ####        ####################
                ####                ####        ################        ########    ####
                ####                ####        ################        ########    ####
            ####################        ########    ####    ########    ############
            ####################        ########    ####    ########    ############
            ####        ####    ########    ####################        ########
            ####        ####    ########    ####################        ########
        ############        ####################    ####        ####                ####
        ############        ####################    ####        ####                ####
                                    ####            ####        ####    ####
                                    ####            ####        ####    ####
    ############################        ####    ####    ####        ####    ########
    ############################        ####    ####    ####        ####    ########
    ####                    ####    ####    ####                ####################
    ####                    ####    ####    ####                ####################
    ####    ############    ####    ####        ####    ####        ####        ####
    ####    ############    ####    ####        ####    ####        ####        ####
    ####    ############    ####    ########    ####################    ####
    ####    ############    ####    ########    ####################    ####
    ####    ############    ####    ########        ####    ########        ####
    ####    ############    ####    ########        ####    ########        ####
    ####                    ####        ####    ################    ############
    ####                    ####        ####    ################    ############
    ############################    ########        ####            ####        ####
    ############################    ########        ####            ####        ####

# FUNCTIONS

## `qr_code_as_text`

    say qr_code_as_text( text => 'hello' );

Returns a string with newlines that represents
the QR-Code.

Options

- **text**

    The text to turn into a QR-Code

- **charset**

        charset => 'utf8',

    The charset to use when rendering the QR-Code,
    default is `utf8`.

- **dimensions**

    Optional

        dimensions => '1x2',

    The number of pixels per returned character.
    Currently for ASCII the dimensions the dimensions
    are `2x1` for ascii and `2x1` for `utf8`.

# SEE ALSO

[Text::QRCode](https://metacpan.org/pod/Text%3A%3AQRCode) - needs an update to support `.` in `@INC`

[Term::QRCode](https://metacpan.org/pod/Term%3A%3AQRCode) - needs [Text::QRCode](https://metacpan.org/pod/Text%3A%3AQRCode)
